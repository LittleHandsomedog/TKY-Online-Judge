<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="top.hcode.hoj.mapper.ProblemMapper">

    <resultMap id="map_ProblemList" type="top.hcode.hoj.pojo.vo.ProblemVO">
        <id column="pid" property="pid"></id>
        <result column="problem_id" property="problemId"></result>
        <result column="title" property="title"></result>
        <result column="difficulty" property="difficulty"></result>
        <result column="type" property="type"></result>
        <collection property="tags" ofType="top.hcode.hoj.pojo.entity.problem.Tag" select="getProblemTag" column="pid">
        </collection>
    </resultMap>

    <!-- 主查询 -->
    <select id="getProblemList" resultMap="map_ProblemList" useCache="true">
        SELECT DISTINCT p.id AS pid, p.problem_id, p.title, p.difficulty, p.type
        FROM problem p
        <if test="tid != null and tid.size() > 0">
            RIGHT JOIN
            (
            SELECT pid FROM
            problem_tag
            <where>
                <foreach collection="tid" item="id" open="" separator=" or" close="">
                    tid = #{id}
                </foreach>
            </where>
            GROUP BY pid
            HAVING COUNT(pid) = #{tagListSize}
            ) pt
            ON p.id = pt.pid
        </if>
        <where>
            p.auth = 1 and p.is_group = false
            <if test="keyword != null and keyword != ''">
                and (
                p.title like concat('%',#{keyword},'%') or p.problem_id like concat('%',#{keyword},'%')
                <if test="pid != null and pid != ''">
                    or p.id = #{pid}
                </if>
                )
            </if>
            <if test="difficulty != null">
                and p.difficulty = #{difficulty}
            </if>
            <if test="oj != null and oj !='Mine'">
                and p.problem_id like concat(#{oj},'%') and p.is_remote=true
            </if>
            <if test="oj != null and oj =='Mine'">
                and p.is_remote=false
            </if>
        </where>
        order by length(p.problem_id) asc,p.problem_id asc
    </select>

    <!-- 子查询 :为了防止分页总数据数出错-->
    <select id="getProblemTag" resultType="top.hcode.hoj.pojo.entity.problem.Tag">
        select t.*
        from tag t,
             problem_tag pt
        where t.id = pt.tid
          and pt.pid = #{pid}
    </select>

    <select id="getContestPrevProblem" resultType="top.hcode.hoj.pojo.vo.PrevOrNextProblemVO">
        select c.display_id as problemId from contest_problem c
        <where>
            c.cid = #{cid} and
            (length(c.display_id) &lt; length(#{pid}) or
            length(c.display_id) = length(#{pid}) and c.display_id &lt; #{pid})
        </where>
        order by length(c.display_id) desc,c.display_id desc LIMIT 1
    </select>

    <select id="getContestNextProblem" resultType="top.hcode.hoj.pojo.vo.PrevOrNextProblemVO">
        select c.display_id as problemId from contest_problem c
        <where>
            c.cid = #{cid} and
            (length(c.display_id) &gt; length(#{pid}) or
            length(c.display_id) = length(#{pid}) and c.display_id &gt; #{pid})
        </where>
        order by length(c.display_id) asc,c.display_id asc LIMIT 1
    </select>

    <select id="getHomePrevProblem" resultType="top.hcode.hoj.pojo.vo.PrevOrNextProblemVO">
        select p.problem_id as problemId from problem p
        <where>
            p.auth = 1 and
            p.is_remote = #{isRemote} and
            (length(p.problem_id) &lt; length(#{pid}) or
            length(p.problem_id) = length(#{pid}) and p.problem_id &lt; #{pid})
        </where>
        order by length(p.problem_id) desc,p.problem_id desc LIMIT 1
    </select>

    <select id="getHomeNextProblem" resultType="top.hcode.hoj.pojo.vo.PrevOrNextProblemVO">
        select p.problem_id as problemId from problem p
        <where>
            p.auth = 1 and
            p.is_remote = #{isRemote} and
            (length(p.problem_id) &gt; length(#{pid}) or
            length(p.problem_id) = length(#{pid}) and p.problem_id &gt; #{pid})
        </where>
        order by length(p.problem_id) asc,p.problem_id asc LIMIT 1
    </select>

    <select id="getTrainingPrevProblem" resultType="top.hcode.hoj.pojo.vo.PrevOrNextProblemVO">
        SELECT a.display_id as problemId
        FROM training_problem a
        WHERE a.tid = #{tid}
          AND (
                    a.rank &lt; (SELECT b.rank FROM training_problem b WHERE b.display_id = #{pid} AND b.tid = #{tid}) OR
                    length(a.display_id) &lt; length(#{pid}) OR
                    length(a.display_id) = length(#{pid}) AND a.display_id &lt; #{pid} AND
                    a.rank = (SELECT b.rank FROM training_problem b WHERE b.display_id = #{pid} AND b.tid = #{tid}))
        order by a.rank desc, length(a.display_id) desc, a.display_id desc LIMIT 1
    </select>
    <select id="getTrainingNextProblem" resultType="top.hcode.hoj.pojo.vo.PrevOrNextProblemVO">
        SELECT a.display_id as problemId
        FROM training_problem a
        WHERE a.tid = #{tid}
          AND (
                    a.rank > (SELECT b.rank FROM training_problem b WHERE b.display_id = #{pid} AND b.tid = #{tid}) OR
                    length(a.display_id) > length(#{pid}) OR
                    length(a.display_id) = length(#{pid}) AND a.display_id > #{pid} AND
                    a.rank = (SELECT b.rank FROM training_problem b WHERE b.display_id = #{pid} AND b.tid = #{tid}))
        order by a.rank asc, length(a.display_id) asc, a.display_id asc LIMIT 1
    </select>
</mapper>